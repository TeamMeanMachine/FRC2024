import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
    id "java"
    id "org.jetbrains.kotlin.jvm" version "1.9.21"
    id "edu.wpi.first.GradleRIO" version "2025.1.1-beta-2"
    id "com.github.gmazzo.buildconfig" version "3.0.0"
}

java {
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

def ROBOT_MAIN_CLASS = "org.team2471.frc2024.Main"

buildConfig {
    buildConfigField("long", "BUILD_TIME", "${System.currentTimeMillis()}L")
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = 2471
            debug = false

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                    jvmArgs.add("-XX:+UnlockExperimentalVMOptions")
                    jvmArgs.add("-XX:GCTimeRatio=5")
                    jvmArgs.add("-XX:+UseSerialGC")
                    jvmArgs.add("-XX:MaxGCPauseMillis=50")

                    // The options below may improve performance, but should only be enabled on the RIO 2
                    //
                    // final MAX_JAVA_HEAP_SIZE_MB = 100;
                    // jvmArgs.add("-Xmx" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    // jvmArgs.add("-Xms" + MAX_JAVA_HEAP_SIZE_MB + "M")
                    // jvmArgs.add("-XX:+AlwaysPreTouch")
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    // Change to true to delete files on roboRIO that no
                    // longer exist in deploy directory on roboRIO
                    deleteOldFiles = true
                }
            }
        }
    }
}



def deployArtifact = deploy.targets.roborio.artifacts.frcJava
var advantageKitVersion = "4.0.0-beta-1"

wpi.java.debugJni = false

repositories {
    mavenCentral()
    maven { setUrl("https://frcmaven.wpi.edu/artifactory/release/")}
    maven { setUrl("https://plugins.gradle.org/m2/")}
    maven { setUrl("https://maven.ctr-electronics.com/release/") }
    maven { setUrl("https://www.revrobotics.com/content/sw/max/sdk/maven/")}
    maven { setUrl("https://maven.photonvision.org/repository/internal")}
//    maven { url 'https://nexus.otake.pw/repository/maven-public/' }
    maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }
}

task(replayWatch, type: JavaExec) {
    mainClass = "org.littletonrobotics.junction.ReplayWatch"
    classpath = sourceSets.main.runtimeClasspath
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {
    implementation project("meanlib")

    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.1'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    testImplementation 'junit:junit:4.12'

    compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31"
    compileOnly 'org.jetbrains.kotlin:kotlin-stdlib:1.5.31'

    // intentionally not using multhreaded coroutines due to potential memory leaks under heavy load
    compileOnly 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.2'
    compileOnly 'com.github.gmazzo.buildconfig:com.github.gmazzo.buildconfig.gradle.plugin:3.0.0'

//    implementation 'pw.otake.pseudoresonance:pixy2-java-api:1.4.1'
//    implementation("org.photonvision:photonlib-java:v2024.3.1")
//    implementation("org.photonvision:photontargeting-java:v2024.3.1")

    //AdvantageKit libs
    implementation("org.littletonrobotics.akit:akit-java:$advantageKitVersion")
//    implementation("org.littletonrobotics.akit.junction:wpilib-shim:$advantageKitVersion")
//    implementation("org.littletonrobotics.akit.conduit:conduit-api:$advantageKitVersion")
    implementation("org.littletonrobotics.akit:akit-wpilibio:$advantageKitVersion")
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    dependsOn(':meanlib:jar')
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it)}}
    from sourceSets.main.allSource
    manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

tasks.withType(JavaCompile) {
    options.compilerArgs.add '-XDstringConcat=inline'
}


deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled = true
wpi.sim.addDriverstation()

//Sets the websocket client remote host.
wpi.sim.envVar("HALSIMWS_HOST", "10.0.0.2")
wpi.sim.addWebsocketsServer().defaultEnabled = true

wrapper {
    gradleVersion = '8.11'
    distributionType = Wrapper.DistributionType.BIN
}
//configurations.configureEach {
//    exclude("edu.wpi.first.wpilibj")
//}

tasks.register('checkAkitInstall', JavaExec) {
    dependsOn "classes"
    mainClass = "org.littletonrobotics.junction.CheckInstall"
    classpath = sourceSets.main.runtimeClasspath
}

compileKotlin {
    kotlinOptions.jvmTarget = JavaVersion.VERSION_17
    kotlinOptions.freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"

    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_17
}

test {
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

